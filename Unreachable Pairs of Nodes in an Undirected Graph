class Solution {
    boolean[] vis;
	ArrayList<Integer>[] graph;
    public long countPairs(int n, int[][] edges) {
        graph=new ArrayList[n];
		for(int i=0;i<n;i++){
			graph[i]=new ArrayList<>();
		}
		for(int i=0;i<edges.length;i++){
			int x=edges[i][0];
			int y=edges[i][1];
			graph[x].add(y);
			graph[y].add(x);
		}
	    vis=new boolean[n];
		long total=((long)n*(n-1))/2;
		for(int i=0;i<n;i++){
			if(!vis[i])
			{
				int nodes=dfs(i);
				long pairs=((long)nodes * (nodes - 1))/2;
				total -=pairs;
			}
		}
		return total;
    }
	int dfs(int u){
		vis[u]=true;
		int cnt=1;
		for(int v:graph[u]){
			if(!vis[v])
				cnt+=dfs(v);
		}
		return cnt;
	}
}
