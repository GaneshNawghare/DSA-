class Solution {
        public int[][] findFarmland(int[][] land) {
            // Queue<int[]> q=new LinkedList<>();
             int n=land.length;
             int m=land[0].length;
             ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
             boolean[][] vis=new boolean[n][m];
             for(int i=0;i<land.length;i++){
               for(int j=0;j<land[0].length;j++){
                  if(land[i][j]==1 && vis[i][j] == false){
                     ArrayList<Integer> level=new ArrayList<>();
                     level.add(i);
                     level.add(j);
                     int[] ans1= bfs(i,j,vis,land);
                     level.add(ans1[0]);
                     level.add(ans1[1]);
                     ans.add(level);
                  }
               }
            }
         int[][] res=new int[ans.size()][4];
        for(int i =0;i<ans.size();i++){
            for(int j=0;j<4;j++){
                res[i][j]=ans.get(i).get(j);
            }
        }
    return res;
}
  public int[] bfs(int i,int j,boolean[][] vis,int[][] land){
     Queue<int[]> q=new LinkedList<>();
     q.add(new int[]{i,j});
     vis[i][j]=true;
     int[] ans=new int[2];
     ans[0]=i;
     ans[1]=j;
     int n=land.length;
     int m=land[0].length;
     int[][] dir=new int[][]{{1,0},{0,1},{-1,0},{0,-1}};
     while(q.size()>0){
          int size=q.size();
          for(int k=0;k<size;k++){
               int[] temp=q.poll();
               for(int p=0;p<4;p++){
               int x=temp[0]+dir[p][0];
               int y=temp[1]+dir[p][1];
               if(x>=0 && y>=0 && x < n && y < m && vis[x][y]==false && land[x][y]== 1 )
               {
                  q.add(new int[]{x,y});
                  vis[x][y]=true;
                  ans[0]=x;
                  ans[1]=y;
               }
            }
        }
     }
    return ans;
  }
}
